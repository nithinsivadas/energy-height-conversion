function [methodinfo,structs,enuminfo,ThunkLibName]=mHeader
%MHEADER Create structures to define interfaces found in 'onera_desp_lib'.

%This function was generated by loadlibrary.m parser version  on Wed Oct 24 19:31:14 2018
%perl options:'onera_desp_lib.i -outfile=mHeader.m -thunkfile=onera_desp_lib_thunk_pcwin64.c -header=onera_desp_lib.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'onera_desp_lib_thunk_pcwin64');
% void irbem_fortran_version1_ ( int * version ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='irbem_fortran_version1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% void get_irbem_ntime_max1_ ( int * ntime_max ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='get_irbem_ntime_max1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% void make_lstar1_ ( int * ntime , int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * J , double * MLT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='make_lstar1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void landi2lstar1_ ( int * ntime , int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * J , double * MLT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='landi2lstar1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void landi2lstar_shell_splitting1_ ( int * ntime , int * nipa , int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * alpha , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * J , double * MLT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='landi2lstar_shell_splitting1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void empiricallstar1_ ( int * ntime , int * kext , int * options , int * iyear , int * idoy , double * maginput , double * Lm , double * J , double * Lstar ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='empiricallstar1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void make_lstar_shell_splitting1_ ( int * ntime , int * Nipa , int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * alpha , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * J , double * MLT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='make_lstar_shell_splitting1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void drift_shell1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * J , double * posit , int * ind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='drift_shell1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void drift_bounce_orbit1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * alpha , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * Bmir , double * J , double * posit , int * ind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='drift_bounce_orbit1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void drift_bounce_orbit2_1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * alpha , double * maginput , double * R0 , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * Bmir , double * J , double * posit , int * ind , double * hmin , double * hmin_lon ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='drift_bounce_orbit2_1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void trace_field_line1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Lm , double * Blocal , double * Bmin , double * J , double * posit , int * ind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='trace_field_line1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void trace_field_line2_1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * R0 , double * Lm , double * Blocal , double * Bmin , double * J , double * posit , int * ind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='trace_field_line2_1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void trace_field_line_towards_earth1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * ds , double * posit , int * ind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='trace_field_line_towards_earth1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void get_field1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Bgeo , double * B ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_field1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void get_field_multi_ ( int * ntime , int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Bgeo , double * B ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_field_multi_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void find_mirror_point1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * alpha , double * maginput , double * Blocal , double * Bmirror , double * xGEO ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='find_mirror_point1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void find_foot_point1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * stop_alt , int * hemi_flag , double * maginput , double * xfoot , double * Bfoot , double * Bfootmag ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='find_foot_point1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void get_hemi1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , int * xHEMI ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_hemi1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void get_hemi_multi_ ( int * ntime , int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , int * xHEMI ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_hemi_multi_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void get_bderivs_ ( int * ntime , int * kext , int * options , int * sysaxes , double * dX , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Bgeo , double * Bmag , double * gradBmag , double * diffB ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_bderivs_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void compute_grad_curv_curl_ ( int * ntime , double * Bgeo , double * Bmag , double * gradBmag , double * diffB , double * grad_par , double * grad_perp , double * grad_drift , double * curvature , double * Rcurv , double * curv_drift , double * curlB , double * divB ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='compute_grad_curv_curl_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void lstar_phi1_ ( int * ntime , int * whichinv , int * options , int * iyear , int * idoy , double * Lstar , double * Phi ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='lstar_phi1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void find_magequator1_ ( int * kext , int * options , int * sysaxes , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Bmin , double * xGEO ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='find_magequator1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void get_mlt1_ ( int * iyr , int * idoy , double * UT , double * xGEO , double * MLT ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_mlt1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void fly_in_nasa_aeap1_ ( int * ntime , int * sysaxes , int * whichm , int * whatf , int * Nene , double * energy , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * flux ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='fly_in_nasa_aeap1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void get_ae8_ap8_flux_ ( int * ntime , int * whichm , int * whatf , int * Nene , double * energy , double * BBo , double * L , double * flux ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_ae8_ap8_flux_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void fly_in_afrl_crres1_ ( int * ntime , int * sysaxes , int * whichm , int * whatf , int * nene , double * energy , int * iyear , int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * Ap15 , double * flux , char * ascii_path , int * strlen ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='fly_in_afrl_crres1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% void get_crres_flux_ ( int * ntime , int * whichm , int * whatf , int * nene , double * energy , double * BBo , double * L , double * Ap15 , double * flux , char * ascii_path , int * strlen ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='get_crres_flux_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% void sgp4_tle1_ ( int * runtype , double * startsfe , double * stopsfe , double * deltasec , char * InFileByte , int * strlenIn , char * OutFileByte , int * strlenOut ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='sgp4_tle1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'int32Ptr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% void sgp4_ele1_ ( int * sysaxes , int * Yr , int * Mon , int * Day , int * Hr , int * Minute , double * Sec , double * e1 , double * e2 , double * e3 , double * e4 , double * e5 , double * e6 , int * ele_opts , double * startsfe , double * stopsfe , double * deltasec , int * outYr , int * outDoy , double * outSec , double * x1 , double * x2 , double * x3 ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='sgp4_ele1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void coord_trans_vec1_ ( int * ntime , int * sysaxesIN , int * sysaxesOUT , int * iyr , int * idoy , double * secs , double * xINV , double * xOUTV ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='coord_trans_vec1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void rv2coe_ ( double * R , double * V , double * P , double * A , double * Ecc , double * Incl , double * Omega , double * Argp , double * Nu , double * M , double * ArgLat , double * TrueLon , double * LonPer ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='rv2coe_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void fly_in_ige1_ ( int * launch_year , int * duration , int * whichm , int * whatf , int * nene , double * energy , double * Lower_flux , double * Mean_flux , double * Upper_flux ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='fly_in_ige1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void fly_in_meo_gnss1_ ( int * launch_year , int * duration , int * whichm , int * whatf , int * nene , double * energy , double * Lower_flux , double * Mean_flux , double * Upper_flux ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='fly_in_meo_gnss1_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void nrlmsise00_ ( int * ntime , int * whichAp , int * DOY , double * UT , double * ALT , double * LAT , double * LON , double * F107A , double * F107 , double * AP , double * Dens , double * Temp ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='nrlmsise00_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void msise90_ ( int * ntime , int * whichAp , int * DOY , double * UT , double * ALT , double * LAT , double * LON , double * F107A , double * F107 , double * AP , double * Dens , double * Temp ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='msise90_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void msis86_ ( int * ntime , int * whichAp , int * DOY , double * UT , double * ALT , double * LAT , double * LON , double * F107A , double * F107 , double * AP , double * Dens , double * Temp ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='msis86_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void shieldose2_ ( int * IDET , int * INUC , int * IMAX , int * IUNT , double * Zin , double * EMINS , double * EMAXS , double * EMINP , double * EMAXP , int * NPTSP , double * EMINE , double * EMAXE , int * NPTSE , int * JSMAX , int * JPMAX , int * JEMAX , double * EUNIT , double * DURATN , double * ESin , double * SFLUXin , double * EPin , double * PFLUXin , double * EEin , double * EFLUXin , double * SolDose , double * ProtDose , double * ElecDose , double * BremDose , double * TotDose ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='shieldose2_'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
methodinfo=fcns;